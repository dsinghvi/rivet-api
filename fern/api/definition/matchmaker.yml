imports:
  commons: commons.yml

services:
  http:
    MatchmakerService:
      auth: true
      base-path: /
      endpoints:
        FindLobby:
          display-name: Find a Lobby
          docs: Finds a lobby based on the given criteria. If a lobby is not found and `prevent_auto_create_lobby` is `true`, a new lobby will be created.
          path: /lobbies/find
          method: POST
          request:
            name: FindLobbyInput
            body:
              properties:
                game_modes:
                  type: list<string>
                  docs: Game modes to match lobbies against.
                regions:
                  type: optional<list<string>>
                  docs: Regions to match lobbies against. If not specified, the optimal region will be determined and will attempt to find lobbies in that region.
                prevent_auto_create_lobby:
                  type: optional<boolean>
                  docs: Prevents a new lobby from being created when finding a lobby. If no lobby is found, a `MATCHMAKER_LOBBY_NOT_FOUND` error will be thrown.
                captcha:
                  type: optional<CaptchaConfig>
                  docs: Methods to verify a captcha.
          response:
            type: FindLobbyOutput
            docs: A matchmaker lobby.
          errors:
            - commons.BadRequestError
            - commons.ForbiddenError
            - commons.NotFoundError
            - commons.UnauthorizedError
            - commons.RateLimitError
            - commons.InternalError

types:
  LobbyId: uuid

  FindLobbyOutput:
    properties:
      lobby: MatchmakerLobbyJoinInfo

  MatchmakerLobbyJoinInfo:
    docs: A matchmaker lobby.
    properties:
      lobby_id:
        type: LobbyId
        docs: A universally unique identifier.
      region:
        type: MatchmakerLobbyJoinInfoRegion
        docs: A matchmaker lobby region.
      ports:
        type: MatchmakerLobbyJoinInfoPorts
        docs: A list of lobby ports.
      player:
        type: MatchmakerLobbyJoinInfoPlayer
        docs: A matchmaker lobby player.

  MatchmakerLobbyJoinInfoRegion:
    properties:
      region_id:
        type: string
        docs: |
          A human readable short identifier used to references resources.
          Different than a `rivet.common#Uuid` because this is intended to be human readable.
          Different than `rivet.common#DisplayName` because this should not include special characters and be short.
      display_name:
        type: string
        docs: Represent a resource's readable display name.

  MatchmakerLobbyJoinInfoPorts: map<string, MatchmakerLobbyJoinInfoPort>

  MatchmakerLobbyJoinInfoPort:
    docs: A matchmaker lobby port. Configured by `rivet.cloud#LobbyGroupRuntimeDockerPort$label`.
    properties:
      host:
        type: optional<string>
        docs: The host for the given port. Will be null if using a port range.
      hostname:
        type: string
        docs: The hostname for the given port.
      port:
        type: optional<integer>
        docs: The port number for this lobby. Will be null if using a port range.
      port_range:
        type: MatchmakerLobbyJoinInfoPortRange
        docs: The port range for this lobby.
      is_tls:
        type: boolean
        docs: Wether or not this lobby port uses TLS. You cannot mix a non-TLS and TLS ports.

  MatchmakerLobbyJoinInfoPortRange:
    docs: Inclusive range of ports that can be connected to.
    properties:
      min:
        type: integer
        docs: Minimum port that can be connected to. Inclusive range.
      max:
        type: integer
        docs: Maximum port that can be connected to. Inclusive range.

  CaptchaConfig:
    union:
      hcaptcha: CaptchaConfigHcaptcha

  CaptchaConfigHcaptcha:
    docs: hCaptcha configuration.
    properties:
      client_response: string

  MatchmakerLobbyJoinInfoPlayer:
    properties:
      token:
        type: string
        docs: Pass this token through the socket to the lobby server. The lobby server will validate this token with `rivet.api.matchmaker#PlayerConnected$player_token`.
