# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml

services:
  http:
    IdentityService:
      auth: true
      base-path: /identities
      endpoints:
        setupIdentity:
          path: /
          method: POST
          request: 
            name: SetupIdentityInput
            body:
              properties:
                existing_identity_token: 
                  type: commons.JWT
                  docs: | 
                    Token returned from previous call to
                    rivet.api.identity#SetupIdentity`. If this token is invalid, a new
                    identity will be returned.
          response: SetupIdentityOutput

        # getIdentityProfile:
        #   path: /{identity_id}/profile
        #   path-parameters:
        #     identity_id: IdentityId
        #   request:
        #     name: GetIdentityProfileRequest
        #     query-parameters:
        #       watch_index: optional<string>
        #   response: GetIdentityProfileOutput
        #   errors:
        #     - commons.BadRequestError
        #     - commons.ForbiddenError
        #     - commons.NotFoundError
        #     - commons.UnauthorizedError
        #     - commons.RateLimitError
        #     - commons.InternalError

types:
  # IdentityId: uuid

  # Identifier: string

  # DisplayName: string

  # GetIdentityProfileOutput:
  #   properties:
  #     identity: IdentityProfile
  #     watch: commons.WatchResponse

  # IdentityProfile:
  #   properties:
  #     identity_id: IdentityId
  #     display_name: DisplayName
  #     account_number: commons.AccountNumber
  #     avatar_url: string
  #     presence: optional<IdentityPresence>
  #     # skipping converting over party objects for now
  #     # party: PartySummary
  #     is_registered: boolean
  #     external: IdentityExternalLinks
  #     is_admin: boolean
  #     is_game_linked: boolean
  #     dev_state: IdentityDevState
  #     follower_count: integer
  #     following_count:
  #       type: integer
  #       docs: Whether or not the requestee's identity is following this identity.
  #     following:
  #       type: boolean
  #       docs: Whether or not this identity following the requestee's identity.
  #     is_following_me:
  #       type: boolean
  #       docs: Whether or not this identity is both followng and is followed by the
  #         requestee's identity.
  #     is_mutual_following: boolean
  #     join_ts: datetime
  #     bio: Bio
  #     linked_accounts: list<IdentityLinkedAccount>
  #     groups: list<IdentityGroup>
  #     games: list<GameStatSummary>

  # IdentityPresence:
  #   properties:
  #     update_ts: datetime
  #     status: IdentityStatus
  #     game_ y: IdentityGameActivity

  # IdentityStatus:
  #   enum:
  #     - name: ONLINE
  #       value: online
  #     - name: AWAY
  #       value: away
  #     - name: offline
  #       value: offline

  # IdentityGameActivity:
  #   properties:
  #     game: GameHandle
  #     message: string
  #     public_metadata: unknown
  #     mutual_metadata: unknown

  # GameHandle:
  #   properties:
  #     game_id: uuid
  #     name_id: Identifier
  #     display_name: DisplayName
  #     log_url: optional<string>
  #     banner_url: optional<string>

  # PartyHandle:
  #   properties:
  #     party_id: uuid
  #     create_ts: datetime
  #     activity: PartyActivity
  #     external: PartyExternalLinks

  # PartyExternalLinks:
  #   properties:
  #     chat: string

  # PartyActivity:
  #   union:
  #     idle: {}
  #     matchmaker_finding_lobby: PartyActivityMatchmakerFindingLobby
  #     matchmaker_lobby: PartyActivityMatchmakerLobby

  # PartyActivityMatchmakerFindingLobby:
  #   properties:
  #     game: GameHandle

  # PartyActivityMatchmakerLobby:
  #   properties:
  #     lobby: PartyMatchmakerLobby
  #     game: GameHandle

  # PartyMatchmakerLobby:
  #   properties:
  #     lobby_id: uuid

  # IdentityExternalLinks:
  #   properties:
  #     profile: string
  #     settings: optional<string>
  #     chat: optional<string>

  # IdentityDevState: string

  # Bio:
  #   type: string
  #   docs: Follows regex ^(?:[^\n\r]+\n?|\n){1,5}$

  # IdentityLinkedAccount:
  #   union:
  #     email: IdentityEmailLinkedAccount

  # IdentityEmailLinkedAccount:
  #   properties:
  #     email: Email

  # Email: string

  # IdentityGroup:
  #   properties:
  #     group: GroupHandle

  # GroupHandle:
  #   properties:
  #     group_id: uuid
  #     display_name: DisplayName
  #     avatar_url:
  #       docs: The URL of this group's avatar image
  #       type: string
  #     external: GroupExternalLinks
  #     is_developer:
  #       docs: Whether or not this group is a developer group.
  #       type: optional<boolean>

  # GroupExternalLinks:
  #   properties:
  #     profile: string
  #     chat: string

  # GameStatSummary:
  #   properties:
  #     game: GameHandle
  #     # skipping stats for now
  #     # stats: GameStats

  SetupIdentityOutput: 
    docs: | 
      Token used to authenticate the identity.
      Should be stored somewhere permanent.
      Pass this to `rivet.api.identity#SetupIdentity$existing_identity_token`
      next time `rivet.api.identity#SetupIdentity` is called.

      Token has a 90 day TTL. This means that if `rivet.api.identity#SetupIdentity` is not called
      again within 90 days, the token will no longer be valid. If this
      happens, the user can recover their account through the linking process
      (see `rivet.api.identity#PrepareGameLink`).

      This token should be stored locally and never sent to a server or another device.
      If this token is comprimised, anyone with access to this token has control of the identity. 
    
    properties:
      identity_token: 
        type: commons.JWT 
        docs: Timestamp (in milliseconds) at which the token expires.
      identity_token_expire_ts: 
        type: commons.Timestamp
        docs: Information about the identity that was just authenticated.
      identity: 
        type: IdentityProfile
        docs: The UUID of the game this identity belongs to.
      game_id: uuid