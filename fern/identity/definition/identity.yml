# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons/commons.yml
  game: game.yml
  party: party.yml
  upload: upload.yml
  identityCommons: commons/identity.yml
  groupCommons: commons/group.yml

services:
  http:
    IdentityService:
      auth: true
      base-path: /identities
      endpoints:
        setupIdentity:
          path: /
          method: POST
          request:
            name: SetupIdentityInput
            body:
              properties:
                existing_identity_token:
                  type: commons.JWT
                  docs: |
                    Token returned from previous call to
                    rivet.api.identity#SetupIdentity`. If this token is invalid, a new
                    identity will be returned.
          response: SetupIdentityOutput

        getIdentityProfile:
          method: GET
          path: /{identity_id}/profile
          path-parameters:
            identity_id: uuid
          request:
            name: GetIdentityProfileInput
            query-parameters:
              watch_index: optional<commons.WatchQuery>
          response: GetIdentityProfileOutput
          errors:
            - commons.BadRequestError
            - commons.ForbiddenError
            - commons.NotFoundError
            - commons.UnauthorizedError
            - commons.RateLimitError
            - commons.InternalError

        getIdentitySelfProfile:
          method: GET
          path: /self/profile
          request:
            name: GetIdentitySelfProfileInput
            query-parameters:
              watch_index: commons.WatchQuery
          response: GetIdentitySelfProfileOutput

        getIdentityHandles:
          method: GET
          path: /batch/handle
          request:
            name: GetIdentityHandlesInput
            query-parameters:
              identity_ids:
                type: uuid
                allow-multiple: true
          response: GetIdentityHandlesOutput

        getIdentitySummaries:
          docs: Fetches a list of identity summaries.
          method: GET
          path: /batch/summary
          request:
            name: GetIdentitySummariesInput
            query-parameters:
              identity_ids:
                type: uuid
                allow-multiple: true
          response: GetIdentitySummariesOutput

        updateIdentityProfile:
          docs: Updates profile of the current identity.
          method: POST
          path: /self/profile
          request:
            name: UpdateIdentityProfileInput
            body:
              properties:
                display_name: commons.DisplayName
                account_number: commons.AccountNumber
                bio: commons.Bio

        validateIdentityProfile:
          docs: Validate contents of identity profile.
            Use to provide immediate feedback on profile changes before committing them.
          method: POST
          path: /self/profile/validate
          request:
            name: ValidateIdentityProfileInput
            body:
              properties:
                display_name: commons.DisplayName
                account_number: commons.AccountNumber
                bio: commons.Bio
          response: ValidateIdentityProfileOutput

        searchIdentities:
          docs: Fuzzy search for identities.
          method: GET
          path: /search
          request:
            # docs: The query to match identity display names and account numbers against.
            name: SearchIdentitiesInput
            query-parameters:
              query: string
              anchor:
                type: optional<string>
                docs: How many identities to offset the search by.
              limit:
                type: optional<integer>
                docs: Amount of identities to return.
          response: SearchIdentitiesOutput

        setIdentityGameActivity:
          docs: Sets the current identity's game activity.
            This activity will automatically be removed when the identity goes offline.
          method: POST
          path: /self/activity
          request:
            name: SetIdentityGameActivityInput
            body:
              properties:
                game_activity: identityCommons.UpdateIdentityGameActivity

        removeIdentityGameActivity:
          docs: Removes the current identity's game activity.
          method: DELETE
          path: /self/activity

        updateIdentityStatus:
          docs: Updates the current identity's status.
          method: POST
          path: /self/status
          request:
            name: UpdateIdentityStatusInput
            body:
              properties:
                status: commons.IdentityStatus

        followIdentity:
          docs: Follows the given identity.
            In order for identities to be "friends", the other identity has to also follow this identity.
          method: POST
          path: /{identity_id}/follow
          path-parameters:
            identity_id: uuid

        unfollowIdentity:
          docs: Unfollows the given identity.
          method: DELETE
          path: /{identity_id}/follow
          path-parameters:
            identity_id: uuid

        prepareIdentityAvatarUpload:
          docs: Prepares an avatar image upload.
            Complete upload with `rivet.api.identity#CompleteIdentityAvatarUpload`.
          method: POST
          path: /avatar-upload/prepare
          request: PrepareIdentityAvatarUploadInput
          response: PrepareIdentityAvatarUploadOutput

        completeIdentityAvatarUpload:
          docs: Completes an avatar image upload. Must be called after the file upload process completes.
          method: POST
          path: /avatar-upload/{upload_id}/complete
          path-parameters:
            upload_id: uuid

        signupForBeta:
          docs: Submits a beta signup form.
          method: POST
          path: /self/beta-signup
          request:
            name: SignupForBetaInput
            body:
              properties:
                name: string
                company_name: string
                preferred_tools: string
                goals: string

        reportIdentity:
          docs: Creates an abuse report for an identity.
          method: POST
          path: /{identity_id}/report
          path-parameters:
            identity_id: uuid
          request:
            name: ReportIdentityInput
            body: optional<string>

        listFollowers:
          method: GET
          path: /{identity_id}/followers
          path-parameters:
            identity_id: uuid
          request:
            name: ListFollowersInput
            query-parameters:
              anchor: optional<string>
              limit: optional<integer>
          response: ListFollowersOutput

        listFollowing:
          method: GET
          path: /{identity_id}/following
          path-parameters:
            identity_id: uuid
          request:
            name: ListFollowingInput
            query-parameters:
              anchor: optional<string>
              limit: optional<integer>
          response: ListFollowingOutput

        listFriends:
          method: GET
          path: /self/friends
          request:
            name: ListFriendsInput
            query-parameters:
              anchor: optional<string>
              limit: optional<integer>
          response: ListFriendsOutput

        listMutualFriends:
          method: GET
          path: /{identity_id}/mutual-friends
          path-parameters:
            identity_id: uuid
          request:
            name: ListMutualFriendsInput
            query-parameters:
              anchor: optional<string>
              limit: optional<integer>
          response: ListMutualFriendsOutput

types:
  ListMutualFriendsOutput:
    properties:
      identities: list<commons.IdentityHandle>
      anchor: optional<string>

  ListFriendsOutput:
    properties:
      identities: list<commons.IdentityHandle>
      anchor: optional<string>

  ListFollowingOutput:
    properties:
      identities: list<commons.IdentityHandle>
      anchor: optional<string>

  ListFollowersOutput:
    properties:
      identities: list<commons.IdentityHandle>
      anchor: optional<string>

  PrepareIdentityAvatarUploadOutput:
    properties:
      upload_id: uuid
      presigned_request: upload.UploadPresignedRequest

  PrepareIdentityAvatarUploadInput:
    docs: The path/filename of the identity avatar.
    properties:
      path: string
      mime:
        type: optional<string>
        docs: The MIME type of the identity avatar. https://www.iana.org/assignments/media-types/media-types.xhtml
      content_length: long

  SearchIdentitiesOutput:
    properties:
      identities: list<commons.IdentityHandle>
      anchor:
        type: optional<string>
        docs: The pagination anchor.
  ValidateIdentityProfileOutput:
    properties:
      errors: commons.ValidationErrors

  GetIdentitySummariesOutput:
    properties:
      identities: list<IdentitySummary>

  GetIdentityHandlesOutput:
    properties:
      identities: list<commons.IdentityHandle>

  GetIdentitySelfProfileOutput:
    properties:
      identity: IdentityProfile
      watch: commons.WatchResponse

  GetIdentityProfileOutput:
    properties:
      identity: IdentityProfile
      watch: commons.WatchResponse

  IdentitySummary:
    properties:
      identity_id: uuid
      display_name: commons.DisplayName
      account_number: commons.AccountNumber
      avatar_url: string
      presence:
        type: optional<commons.IdentityPresence>
        docs: Information about the identity's current status, party, and active game.
      party: optional<party.PartySummary>
      is_registered:
        type: boolean
        docs: Whether or not this identity is registered with a linked account.
      external: identityCommons.IdentityExternalLinks
      following:
        type: boolean
        docs: Whether or not the requestee's identity is following this identity.
      is_following_me:
        type: boolean
        docs: Whether or not this identity following the requestee's identity.
      is_mutual_following:
        type: boolean
        docs:
          Whether or not this identity is both followng and is followed by the
          requestee's identity.

  IdentityProfile:
    properties:
      identity_id: uuid
      display_name: commons.DisplayName
      account_number: commons.AccountNumber
      avatar_url: string
      presence:
        type: optional<commons.IdentityPresence>
        docs: Information about the identity's current status, party, and active game.
      party: optional<party.PartySummary>
      is_registered:
        type: boolean
        docs: Whether or not this identity is registered with a linked account.
      external: identityCommons.IdentityExternalLinks
      is_admin:
        type: boolean
        docs: Whether or not this identity is an admin.
      is_game_linked:
        type: optional<boolean>
        docs: Whether or not this game user has been linked through the Rivet dashboard.
      dev_state: optional<IdentityDevState>
      follower_count: integer
      following_count: integer
      following:
        type: boolean
        docs: Whether or not the requestee's identity is following this identity.
      is_following_me:
        type: boolean
        docs: Whether or not this identity following the requestee's identity.
      is_mutual_following:
        type: boolean
        docs:
          Whether or not this identity is both followng and is followed by the
          requestee's identity.
      join_ts: datetime
      bio: commons.Bio
      linked_accounts: list<IdentityLinkedAccount>
      groups: list<IdentityGroup>
      games: list<game.GameStatSummary>

  IdentityDevState:
    docs: The state of the given identity's developer status.
    enum:
      - value: inactive
        name: INACTIVE
      - value: pending
        name: PENDING
      - value: accepted
        name: ACCEPTED

  IdentityLinkedAccount:
    docs: A union representing an identity's linked accounts.
    union:
      email: IdentityEmailLinkedAccount

  IdentityEmailLinkedAccount:
    docs: An identity's linked email.
    properties:
      email: Email

  Email: string

  IdentityGroup:
    docs: A group that the given identity.
    properties:
      group: groupCommons.GroupHandle

  SetupIdentityOutput:
    docs: |
      Token used to authenticate the identity.
      Should be stored somewhere permanent.
      Pass this to `rivet.api.identity#SetupIdentity$existing_identity_token`
      next time `rivet.api.identity#SetupIdentity` is called.

      Token has a 90 day TTL. This means that if `rivet.api.identity#SetupIdentity` is not called
      again within 90 days, the token will no longer be valid. If this
      happens, the user can recover their account through the linking process
      (see `rivet.api.identity#PrepareGameLink`).

      This token should be stored locally and never sent to a server or another device.
      If this token is comprimised, anyone with access to this token has control of the identity.
    properties:
      identity_token:
        type: commons.JWT
        docs: Timestamp (in milliseconds) at which the token expires.
      identity_token_expire_ts:
        type: datetime
        docs: Information about the identity that was just authenticated.
      identity:
        type: IdentityProfile
        docs: The UUID of the game this identity belongs to.
      game_id: uuid

  GameLinkStatus:
    docs: The link status between an identity and a game user.
    enum:
      - value: incomplete
        name: INCOMPLETE
      - value: complete
        name: COMPLETE
      - value: cancelled
        name: CANCELLED
