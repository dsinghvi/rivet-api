# yaml-language-server: $schema=https://raw.githubusercontent.com/fern-api/fern/main/fern.schema.json

imports:
  commons: commons.yml
  game: game.yml
  party: party.yml
  identity-c: identity-commons.yml

services:
  http:
    IdentityService:
      auth: true
      base-path: /identities
      endpoints:
        setupIdentity:
          path: /
          method: POST
          request:
            name: SetupIdentityInput
            body:
              properties:
                existing_identity_token:
                  type: commons.JWT
                  docs: |
                    Token returned from previous call to
                    rivet.api.identity#SetupIdentity`. If this token is invalid, a new
                    identity will be returned.
          response: SetupIdentityOutput

        getIdentityProfile:
          method: GET
          path: /{identity_id}/profile
          path-parameters:
            identity_id: uuid 
          request:
            name: GetIdentityProfileInput
            query-parameters:
              watch_index: optional<commons.WatchQuery>
          response: GetIdentityProfileOutput
          errors:
            - commons.BadRequestError
            - commons.ForbiddenError
            - commons.NotFoundError
            - commons.UnauthorizedError
            - commons.RateLimitError
            - commons.InternalError

types:
  GetIdentityProfileOutput:
    properties:
      identity: IdentityProfile
      watch: commons.WatchResponse

  IdentityProfile:
    properties:
      identity_id: uuid
      display_name: commons.DisplayName
      account_number: commons.AccountNumber
      avatar_url: string
      presence: 
        type: optional<identity-c.IdentityPresence>
        docs: Information about the identity's current status, party, and active game.
      party: optional<party.PartySummary>
      is_registered: 
        type: boolean
        docs: Whether or not this identity is registered with a linked account.
      external: identity-c.IdentityExternalLinks
      is_admin: 
        type: boolean
        docs: Whether or not this identity is an admin.
      is_game_linked: 
        type: optional<boolean>
        docs: Whether or not this game user has been linked through the Rivet dashboard.
      dev_state: optional<IdentityDevState>
      follower_count: integer
      following_count: integer
      following:
        type: boolean
        docs: Whether or not the requestee's identity is following this identity.
      is_following_me:
        type: boolean
        docs: Whether or not this identity following the requestee's identity.
      is_mutual_following: 
        type: boolean
        docs: Whether or not this identity is both followng and is followed by the
          requestee's identity.
      join_ts: datetime
      bio: Bio
      linked_accounts: list<IdentityLinkedAccount>
      groups: list<IdentityGroup>
      games: list<game.GameStatSummary>    

  IdentityDevState: string

  Bio:
    type: string
    docs: Follows regex ^(?:[^\n\r]+\n?|\n){1,5}$

  IdentityLinkedAccount:
    docs: A union representing an identity's linked accounts.
    union:
      email: IdentityEmailLinkedAccount

  IdentityEmailLinkedAccount:
    docs: An identity's linked email.
    properties:
      email: Email

  Email: string

  IdentityGroup:
    docs: A group that the given identity.
    properties:
      group: GroupHandle

  GroupHandle:
    docs: A group handle.
    properties:
      group_id: uuid
      display_name: commons.DisplayName
      avatar_url:
        docs: The URL of this group's avatar image
        type: string
      external: GroupExternalLinks
      is_developer:
        docs: Whether or not this group is a developer group.
        type: optional<boolean>

  GroupExternalLinks:
    docs: External links for this group.
    properties:
      profile: 
        type: string
        docs: A link to this group's profile page.
      chat: 
        type: string
        docs: A link to this group's chat page.

  SetupIdentityOutput:
    docs: |
      Token used to authenticate the identity.
      Should be stored somewhere permanent.
      Pass this to `rivet.api.identity#SetupIdentity$existing_identity_token`
      next time `rivet.api.identity#SetupIdentity` is called.

      Token has a 90 day TTL. This means that if `rivet.api.identity#SetupIdentity` is not called
      again within 90 days, the token will no longer be valid. If this
      happens, the user can recover their account through the linking process
      (see `rivet.api.identity#PrepareGameLink`).

      This token should be stored locally and never sent to a server or another device.
      If this token is comprimised, anyone with access to this token has control of the identity.
    properties:
      identity_token:
        type: commons.JWT
        docs: Timestamp (in milliseconds) at which the token expires.
      identity_token_expire_ts:
        type: datetime
        docs: Information about the identity that was just authenticated.
      identity:
        type: IdentityProfile
        docs: The UUID of the game this identity belongs to.
      game_id: uuid
